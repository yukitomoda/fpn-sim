/* src/components/components.css */
.app-container {
  max-width: 1300px;
  margin: 20px auto;
  padding: 20px;
  background-color: #ffffff;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.app-container h1 {
  text-align: center;
  color: #1a73e8;
  margin-bottom: 25px;
}

.bit-representation-section,
.output-section {
  margin-bottom: 25px;
  padding: 20px;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.bit-representation-section h2 {
  font-size: 1.2em;
  color: #333;
  margin-top: 0;
  margin-bottom: 15px;
  border-bottom: 1px solid #eee;
  padding-bottom: 10px;
}

label {
  display: block;
  margin-bottom: 8px;
  font-weight: 600;
  color: #555;
}

input[type='number'],
input[type='text'] {
  width: 100%;
  padding: 12px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

input[type='number']:focus,
input[type='text']:focus {
  border-color: #1a73e8;
  outline: none;
  box-shadow: 0 0 0 3px rgba(26, 115, 232, 0.25);
}

.bit-display {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  align-items: flex-start;
}

.bit-group {
  padding: 15px;
  border: 1px solid #dcdcdc;
  border-radius: 6px;
  background-color: #ffffff;
  flex-grow: 1;
}

.bit-group label {
  font-size: 0.9em;
  color: #444;
  margin-bottom: 6px;
}

.bit-group input[type='text'] {
  font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;
  letter-spacing: 1.5px;
}

/* Styling for individual clickable bits */
.clickable-bit {
  display: inline-block;
  padding: 4px 0;
  /* Further reduced padding for max density */
  margin: 0 0;
  /* No vertical margin, minimal horizontal margin */
  border: 1px solid #ccc;
  border-radius: 2px;
  /* Minimal border radius */
  cursor: pointer;
  user-select: none;
  /* Prevents text selection on click */
  font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;
  font-size: 0.9em;
  /* Slightly reduced font size for density */
  min-width: 1.1em;
  /* Further reduced min-width */
  text-align: center;
  line-height: 1.2;
  /* Ensure text is vertically centered */
  transition: background-color 0.2s ease, border-color 0.2s ease;
  /* Smooth hover */
  margin-right: 2px; /* Consistent spacing between bits */
}

/* Removed nth-last-child rules that created uneven spacing with chunks
.clickable-bit:nth-last-child(4n) {
  margin-left: 0.2em;
}

.clickable-bit:nth-last-child(8n) {
  margin-left: 0.5em;
}
*/

.clickable-bit:hover {
  /* background-color: #f0f0f0; */ /* Generic hover background removed, handled by specific bit types */
  border-color: #aaa;
}

.bit-zero {
  background-color: #e0e0e0;
}

.bit-one {
  background-color: #a0d3ff;
}

.bit-zero:hover {
  background-color: #d0d0d0;
  /* border-color is inherited from .clickable-bit:hover */
}

.bit-one:hover {
  background-color: #8acaff;
  /* border-color is inherited from .clickable-bit:hover */
}

/* Specific bit spans can inherit from clickable-bit. Add specific styles if needed. */
.sign-bit-span {}

.exponent-bit-span {}

.significand-bit-span {}

/* Container for scrollable bits within exponent and significand groups */
.bits-scroll-container {
  white-space: normal; /* Allow wrapping */
  /* overflow-x: auto; Removed to prevent horizontal scrolling */
  padding-bottom: 8px; /* Keep for some spacing at the bottom */
  /* The following are important for elements inside a flex item (.bit-group) */
  /* to behave correctly with overflow and potential shrinking. */
  min-width: 0;
  /* Allows the container to shrink if necessary before scrolling */
}

/* Ensure the bit groups can still grow but also accommodate the scroll container */
.sign-bit {
  min-width: 80px;
  flex-basis: 100px;
}

/* Adjusted for new bit styling */
.exponent-bits {
  min-width: 180px;
  flex-basis: 220px;
}

/* Adjusted */
.significand-bits {
  min-width: 280px;
  flex-basis: 850px;
  flex-grow: 2;
}

/* Adjusted */


.output-section {
  background-color: #e9f5ff;
  border-color: #b3d7ff;
}

.output-section p {
  font-size: 1.1em;
  margin: 10px 0;
  color: #222;
}

.output-section span {
  font-weight: bold;
  color: #0056b3;
  word-break: break-all;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .bit-display {
    flex-direction: column;
    gap: 15px;
  }

  .sign-bit,
  .exponent-bits,
  .significand-bits {
    width: 100%;
    min-width: unset;
    flex-basis: auto;
  }
}

/* src/components/components.css */
/* ... existing styles ... */

.slider-section {
  margin-top: 15px;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.slider-section label {
  display: block;
  margin-bottom: 5px;
}

.slider-section input[type="range"] {
  width: 100%;
}

.visual-adjuster-section {
  margin-top: 15px;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  /* display: flex; */ /* Using this might require child elements to be adjusted */
  /* flex-direction: column; */
  /* align-items: center; */ /* Center canvas if it's narrower than section */
}

.visual-adjuster-section label {
  display: block;
  margin-bottom: 5px;
  font-weight: 600; /* Consistent with other labels */
}

.visual-adjuster-section canvas {
  border: 1px solid black; /* Already in component, but can be centralized here */
  cursor: crosshair;     /* Already in component */
  /* margin: 0 auto; */ /* If centered alignment is desired */
}

.interactive-controls-section {
  display: flex;
  flex-wrap: wrap; /* Allow wrapping if screen is too narrow */
  gap: 20px; /* Space between visual adjuster and the sliders/bits group */
  margin-top: 20px;
  margin-bottom: 20px;
  padding: 15px; /* Added padding for the section */
  border: 1px solid #dcdcdc; /* Added border for the section */
  border-radius: 8px; /* Added border-radius for the section */
  background-color: #f9f9f9; /* Consistent background */
}

.sliders-and-bits-group {
  display: flex;
  flex-direction: column;
  gap: 15px; /* Space between sliders and bit input */
  flex-grow: 1; /* Allow this group to take available space */
  min-width: 300px; /* Ensure it has some minimum width */
}

/* Optional: if individual wrappers were used for sliders, for more distinct groups */
/*
.control-group {
  padding: 10px;
  border: 1px solid #eee;
  border-radius: 4px;
  background-color: #ffffff; // Slight distinction from section background
}
*/

/* Styles for SpecialValueButtons */
.special-buttons-container {
  margin-top: 20px;
  padding: 15px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.special-buttons-container h3 {
  margin-top: 0;
  margin-bottom: 15px;
  color: #333;
  font-size: 1.1em;
  text-align: center; /* Center the heading */
}

.buttons-wrapper { /* Style for the added wrapper */
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 10px; /* Adds space between buttons */
}

.special-value-button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 8px 12px;
  /* margin: 5px; Remove individual margins if using gap */
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9em;
  transition: background-color 0.2s ease-in-out;
}

.special-value-button:hover {
  background-color: #0056b3;
}

.special-value-button:active {
  background-color: #004085;
}

/* Styles for wrapped bit display */
.bit-chunk {
  display: block; /* Each chunk takes a new line */
  margin-bottom: 4px; /* Space between lines of bits */
  /* line-height: normal; Ensure default line height doesn't add too much space if bits are small */
}

.bit-chunk span.clickable-bit {
  /* Adjust spacing for bits within a chunk if needed, default clickable-bit margins are 0 0 */
  /* margin-right: 1px; /* Example if space is needed, but clickable-bit has its own logic */
}